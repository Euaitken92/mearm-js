// Autogenerated on Mon Apr 18 2016 17:14:59 GMT+0100 (BST) - do not edit
var baseLanguages = ["en"];
var trans = {
    "en": {
        ":save": "Save",
        ":save-as": "Save as",
        ":new-prog": "New program",
        ":delete-prog": "Delete program",
        ":download": "Download current program",
        ":upload": "Upload program",
        ":open": "Open program",
        ":choose-name": "Choose the file name",
        ":unsaved": "You have unsaved changes which will be lost. Do you want to continue?",
        ":exists": "Error, file already exists with this name",
        ":single-file": "Please select a single file to upload",
        ":sure": "Are you sure you want to delete program",
        ":permanent": "This is permanent and cannot be undone",
        ":address": "Enter the address for your MeArm here",
        ":connect": "Connect",
        ":connected": "Connected",
        ":program": "Program",
        ":run": "Run",
        ":pause": "Pause",
        ":stop": "Stop",
        ":clear": "Clear",
        ":show-help": "Show help",
        ":hide-help": "Hide help",
        ":js-help-title": "Controlling MeArm with Javascript",
        ":js-help-intro": "Use these simple commands to get started controlling MeArm:",
        ":js-forward-help": "move 100 mm forward",
        ":js-back-help": "move 100mm back",
        ":js-left-help": "turn 90 degrees to the left",
        ":js-right-help": "turn 90 degrees to the right",
        ":js-penup-help": "lift the pen up",
        ":js-pendown-help": "lower the pen to draw",
        ":js-beep-help": "make it beep",
        ":hide-js": "Hide Javascript",
        ":show-js": "Show Javascript",
        ":blockly": "Blockly",
        ":blockly-desc": "This app allows more advanced programming techniques to be used to control MeArm",
        ":javascript": "Javascript",
        ":javascript-desc": "Program MeArm using the full power of Javascript directly from your browser",
        ":remote": "Remote Control",
        ":remote-desc": "Use buttons to directly remote control your MeArm",
        ":snap": "Snap!",
        ":snap-desc": "Snap! is very similar to Scratch and runs on lots of platforms",
        "Stop": "Stop",
        ":chrome": "Chrome App",
        ":chrome-desc": "Check out the standalone Chrome App which lets you run all of the apps from this site.",
        ":chrome-intro": "You can now run all of the MeArm Apps from one downloadable Chrome App",
        ":chrome-link": "Install it from the Chrome Web Store",
        ":scratch": "Scratch",
        ":scratch-desc": "Use Scratch to program your MeArm (requires Flash)",
        ":scratch-intro1": "Program MeArm using the Scratch programming environment you know and love.",
        ":scratch-intro2": "You'll need Flash support in your browser for this, if you don't have this (e.g. you're using iOS) you can try",
        ":scratch-link": "Start Using Scratch!",
        ":python": "Python",
        ":python-desc": "Program MeArm using the Python language from within your browser",
        "langName": "English",
        "flag": "gb",
        ":openGrip-cmd": "Open Grip",
        ":closeGrip-cmd": "Close Grip",
        ":moveBaseTo-cmd": "Turn base to [[angle]] degrees",
        ":moveLowerTo-cmd": "Turn lower to [[angle]] degrees",
        ":moveUpperTo-cmd": "Turn upper to [[angle]] degrees",
        ":moveGripTo-cmd": "Turn grip to [[angle]] degrees",
        "mearm": "MeArm"
    }
}
;
/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */

var saveAs=saveAs||function(e){"use strict";if("undefined"==typeof navigator||!/MSIE [1-9]\./.test(navigator.userAgent)){var t=e.document,n=function(){return e.URL||e.webkitURL||e},o=t.createElementNS("http://www.w3.org/1999/xhtml","a"),r="download"in o,i=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},a=e.webkitRequestFileSystem,c=e.requestFileSystem||a||e.mozRequestFileSystem,u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},f="application/octet-stream",s=0,d=500,l=function(t){var o=function(){"string"==typeof t?n().revokeObjectURL(t):t.remove()};e.chrome?o():setTimeout(o,d)},v=function(e,t,n){t=[].concat(t);for(var o=t.length;o--;){var r=e["on"+t[o]];if("function"==typeof r)try{r.call(e,n||e)}catch(i){u(i)}}},p=function(e){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["ï»¿",e],{type:e.type}):e},w=function(t,u,d){d||(t=p(t));var w,y,m,S=this,h=t.type,O=!1,R=function(){v(S,"writestart progress write writeend".split(" "))},b=function(){if((O||!w)&&(w=n().createObjectURL(t)),y)y.location.href=w;else{var o=e.open(w,"_blank");void 0==o&&"undefined"!=typeof safari&&(e.location.href=w)}S.readyState=S.DONE,R(),l(w)},g=function(e){return function(){return S.readyState!==S.DONE?e.apply(this,arguments):void 0}},E={create:!0,exclusive:!1};return S.readyState=S.INIT,u||(u="download"),r?(w=n().createObjectURL(t),o.href=w,o.download=u,void setTimeout(function(){i(o),R(),l(w),S.readyState=S.DONE})):(e.chrome&&h&&h!==f&&(m=t.slice||t.webkitSlice,t=m.call(t,0,t.size,f),O=!0),a&&"download"!==u&&(u+=".download"),(h===f||a)&&(y=e),c?(s+=t.size,void c(e.TEMPORARY,s,g(function(e){e.root.getDirectory("saved",E,g(function(e){var n=function(){e.getFile(u,E,g(function(e){e.createWriter(g(function(n){n.onwriteend=function(t){y.location.href=e.toURL(),S.readyState=S.DONE,v(S,"writeend",t),l(e)},n.onerror=function(){var e=n.error;e.code!==e.ABORT_ERR&&b()},"writestart progress write abort".split(" ").forEach(function(e){n["on"+e]=S["on"+e]}),n.write(t),S.abort=function(){n.abort(),S.readyState=S.DONE},S.readyState=S.WRITING}),b)}),b)};e.getFile(u,{create:!1},g(function(e){e.remove(),n()}),g(function(e){e.code===e.NOT_FOUND_ERR?n():b()}))}),b)}),b)):void b())},y=w.prototype,m=function(e,t,n){return new w(e,t,n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(e,t,n){return n||(e=p(e)),navigator.msSaveOrOpenBlob(e,t||"download")}:(y.abort=function(){var e=this;e.readyState=e.DONE,v(e,"abort")},y.readyState=y.INIT=0,y.WRITING=1,y.DONE=2,y.error=y.onwritestart=y.onprogress=y.onwrite=y.onabort=y.onerror=y.onwriteend=null,m)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof module&&module.exports?module.exports.saveAs=saveAs:"undefined"!=typeof define&&null!==define&&null!=define.amd&&define([],function(){return saveAs});
/*! @source http://purl.eligrey.com/github/classList.js/blob/master/classList.js*/

;if("document" in self&&!("classList" in document.createElement("_"))){(function(j){"use strict";if(!("Element" in j)){return}var a="classList",f="prototype",m=j.Element[f],b=Object,k=String[f].trim||function(){return this.replace(/^\s+|\s+$/g,"")},c=Array[f].indexOf||function(q){var p=0,o=this.length;for(;p<o;p++){if(p in this&&this[p]===q){return p}}return -1},n=function(o,p){this.name=o;this.code=DOMException[o];this.message=p},g=function(p,o){if(o===""){throw new n("SYNTAX_ERR","An invalid or illegal string was specified")}if(/\s/.test(o)){throw new n("INVALID_CHARACTER_ERR","String contains an invalid character")}return c.call(p,o)},d=function(s){var r=k.call(s.getAttribute("class")||""),q=r?r.split(/\s+/):[],p=0,o=q.length;for(;p<o;p++){this.push(q[p])}this._updateClassName=function(){s.setAttribute("class",this.toString())}},e=d[f]=[],i=function(){return new d(this)};n[f]=Error[f];e.item=function(o){return this[o]||null};e.contains=function(o){o+="";return g(this,o)!==-1};e.add=function(){var s=arguments,r=0,p=s.length,q,o=false;do{q=s[r]+"";if(g(this,q)===-1){this.push(q);o=true}}while(++r<p);if(o){this._updateClassName()}};e.remove=function(){var t=arguments,s=0,p=t.length,r,o=false;do{r=t[s]+"";var q=g(this,r);if(q!==-1){this.splice(q,1);o=true}}while(++s<p);if(o){this._updateClassName()}};e.toggle=function(p,q){p+="";var o=this.contains(p),r=o?q!==true&&"remove":q!==false&&"add";if(r){this[r](p)}return !o};e.toString=function(){return this.join(" ")};if(b.defineProperty){var l={get:i,enumerable:true,configurable:true};try{b.defineProperty(m,a,l)}catch(h){if(h.number===-2146823252){l.enumerable=false;b.defineProperty(m,a,l)}}}else{if(b[f].__defineGetter__){m.__defineGetter__(a,i)}}}(self))};


/*! https://mths.be/startswith v0.2.0 by @mathias */
String.prototype.startsWith||!function(){"use strict";var t=function(){try{var t={},r=Object.defineProperty,e=r(t,t,t)&&r}catch(n){}return e}(),r={}.toString,e=function(t){if(null==this)throw TypeError();var e=String(this);if(t&&"[object RegExp]"==r.call(t))throw TypeError();var n=e.length,i=String(t),a=i.length,o=arguments.length>1?arguments[1]:void 0,h=o?Number(o):0;h!=h&&(h=0);var u=Math.min(Math.max(h,0),n);if(a+u>n)return!1;for(var g=-1;++g<a;)if(e.charCodeAt(u+g)!=i.charCodeAt(g))return!1;return!0};t?t(String.prototype,"startsWith",{value:e,configurable:!0,writable:!0}):String.prototype.startsWith=e}();

// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
Object.keys||(Object.keys=function(){"use strict";var t=Object.prototype.hasOwnProperty,r=!{toString:null}.propertyIsEnumerable("toString"),e=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],o=e.length;return function(n){if("object"!=typeof n&&("function"!=typeof n||null===n))throw new TypeError("Object.keys called on non-object");var c,l,p=[];for(c in n)t.call(n,c)&&p.push(c);if(r)for(l=0;o>l;l++)t.call(n,e[l])&&p.push(e[l]);return p}}());

// From https://github.com/neovov/Fullscreen-API-Polyfill
!function(a){"use strict";function b(b,c){var d=a.createEvent("Event");d.initEvent(b,!0,!1),c.dispatchEvent(d)}function c(c){a[i.enabled]=a[e.enabled],a[i.element]=a[e.element],b(i.events.change,c.target)}function d(a){b(i.events.error,a.target)}var e,f,g=!0,h={w3:{enabled:"fullscreenEnabled",element:"fullscreenElement",request:"requestFullscreen",exit:"exitFullscreen",events:{change:"fullscreenchange",error:"fullscreenerror"}},webkit:{enabled:"webkitIsFullScreen",element:"webkitCurrentFullScreenElement",request:"webkitRequestFullScreen",exit:"webkitCancelFullScreen",events:{change:"webkitfullscreenchange",error:"webkitfullscreenerror"}},moz:{enabled:"mozFullScreenEnabled",element:"mozFullScreenElement",request:"mozRequestFullScreen",exit:"mozCancelFullScreen",events:{change:"mozfullscreenchange",error:"mozfullscreenerror"}},ms:{enabled:"msFullscreenEnabled",element:"msFullscreenElement",request:"msRequestFullscreen",exit:"msExitFullscreen",events:{change:"MSFullscreenChange",error:"MSFullscreenError"}}},i=h.w3;for(f in h)if(h[f].enabled in a){e=h[f];break}return!g||i.enabled in a||!e||(a.addEventListener(e.events.change,c,!1),a.addEventListener(e.events.error,d,!1),a[i.enabled]=a[e.enabled],a[i.element]=a[e.element],a[i.exit]=a[e.exit],Element.prototype[i.request]=function(){return this[e.request].apply(this,arguments)}),e}(document);
var Mearm = function(url){
  this.url = url;
  if(url) this.connect();
  this.cbs = {};
  this.listeners = [];
}

Mearm.prototype = {

  connected: false,
  error: false,
  timeoutTimer: undefined,
  devices: {},

  connect: function(url){
    if(url) this.url = url;
    if(!this.connected && !this.error && this.url){
      var self = this;
      this.has_connected = false;
      this.ws = new WebSocket(this.url);
      this.ws.onmessage = function(ws_msg){self.handle_msg(ws_msg)};
      this.ws.onopen = function(){
        self.connected = true;
        self.version(function(){
          self.setConnectedState(true);
        });
      }
      this.ws.onerror = function(err){self.handleError(err)}
      this.ws.onclose = function(err){self.handleError(err)}
      this.connTimeout = window.setTimeout(function(){
        if(!self.connected){
          self.ws.close();
        }
      }, 1000);
    }
  },
  
  fetchDevices: function(cb){
    var self = this;
    var req = new XMLHttpRequest();
    req.addEventListener("load", function(){
      var resp = JSON.parse(this.responseText);
      if(resp.devices && resp.devices.length > 0){
        for(var i = 0; i< resp.devices.length; i++){
          self.devices[resp.devices[i].address] = resp.devices[i];
        }
        cb(self.devices);
      }
    });
    req.addEventListener("error", function(e){
      console.log('Error fetching devices list');
      console.log(e);
    });
    req.open("GET", "http://local.mirobot.io/devices.json");
    req.send();
  },

  disconnect: function(){
    this.connected = false;
    this.error = false
    this.ws.onerror = function(){};
    this.ws.onclose = function(){};
    this.ws.close();
  },

  setConnectedState: function(state){
    var self = this;
    clearTimeout(self.connTimeout);
    self.connected = state;
    if(state){ self.has_connected = true; }
    setTimeout(function(){
      self.emitEvent('readyStateChange', {state: (self.ready() ? 'ready' : 'notReady')});
      self.emitEvent('connectedStateChange', {state: (self.connected ? 'connected' : 'disconnected')});
    }, 500);
    // Try to auto reconnect if disconnected
    if(state){
      if(self.reconnectTimer){
        clearTimeout(self.reconnectTimer);
        self.reconnectTimer = undefined;
      }
    }else{
      if(!self.reconnectTimer){
        self.reconnectTimer = setTimeout(function(){
          self.reconnectTimer = undefined;
          self.connect();
        }, 5000);
      }
    }
  },

  ready: function(){
    return this.connected || this.simulating;
  },
  
  emitEvent: function(event, msg){
    if(typeof this.listeners[event] !== 'undefined'){
      for(var i = 0; i< this.listeners[event].length; i++){
        this.listeners[event][i](msg);
      }
    }
  },

  addEventListener: function(event, listener){
    this.listeners[event] =  this.listeners[event] || [];
    this.listeners[event].push(listener);
  },

  handleError: function(err){
    if(err instanceof CloseEvent || err === 'Timeout'){
      if(this.ws.readyState === WebSocket.OPEN){
        this.ws.close();
      }
      this.msg_stack = [];
    }else{
      console.log(err);
    }
    this.setConnectedState(false);
  },

  openGrip: function(cb){
    this.send({cmd:'openGrip'}, cb);
  },

  closeGrip: function(cb){
    this.send({cmd:'closeGrip'}, cb);
  },

  moveBaseTo: function(angle, cb){
    this.send({cmd:'moveBaseTo', arg: angle}, cb);
  },

  moveLowerTo: function(angle, cb){
    this.send({cmd:'moveLowerTo', arg: angle}, cb);
  },

  moveUpperTo: function(angle, cb){
    this.send({cmd:'moveUpperTo', arg: angle}, cb);
  },

  moveGripTo: function(angle, cb){
    this.send({cmd:'moveGripTo', arg: angle}, cb);
  },

  stop: function(cb){
    var self = this;
    this.send({cmd:'stop'}, function(state, msg, recursion){
      if(state === 'complete' && !recursion){
        for(var i in self.cbs){
          self.cbs[i]('complete', undefined, true);
        }
        self.emitEvent('programComplete');
        self.robot_state = 'idle';
        self.msg_stack = [];
        self.cbs = {};
        if(cb){ cb(state); }
      }
    });
  },
  
  pause: function(cb){
    this.send({cmd:'pause'}, cb);
  },
  
  resume: function(cb){
    this.send({cmd:'resume'}, cb);
  },
  
  ping: function(cb){
    this.send({cmd:'ping'}, cb);
  },

  version: function(cb){
    this.send({cmd:'version'}, cb);
  },

  send: function(msg, cb){
    msg.id = Math.random().toString(36).substr(2, 10)
    if(cb){
      this.cbs[msg.id] = cb;
    }
    if(msg.arg){ msg.arg = msg.arg.toString(); }
    if(['stop', 'pause', 'resume', 'ping', 'version'].indexOf(msg.cmd) >= 0){
      this.send_msg(msg);
    }else{
      if(this.msg_stack.length === 0){
        this.emitEvent('programStart');
      }
      this.msg_stack.push(msg);
      this.process_msg_queue();
    }
  },
  
  send_msg: function(msg){
    var self = this;
    console.log(msg);
    if(this.simulating && this.sim){
      this.sim.send(msg, function(msg){ self.handle_msg(msg) });
    }else if(this.connected){
      this.ws.send(JSON.stringify(msg));
      if(this.timeoutTimer) clearTimeout(this.timeoutTimer);
      this.timeoutTimer = window.setTimeout(function(){ self.handleError("Timeout") }, 3000);
    }
  },
  
  process_msg_queue: function(){
    if(this.robot_state === 'idle' && this.msg_stack.length > 0){
      this.robot_state = 'receiving';
      this.send_msg(this.msg_stack[0]);
    }
  },
  
  handle_msg: function(msg){
    if(typeof msg === 'object' && typeof msg.data === 'string') msg = JSON.parse(msg.data);
    console.log(msg);
    clearTimeout(this.timeoutTimer);
    if(msg.status === 'notify'){
      this.emitEvent(msg.id, msg.msg);
      this.sensorState[msg.id] = msg.msg;
      return;
    }
    if(this.msg_stack.length > 0 && this.msg_stack[0].id == msg.id){
      if(msg.status === 'accepted'){
        if(this.cbs[msg.id]){
          this.cbs[msg.id]('started', msg);
        }
        this.robot_state = 'running';
      }else if(msg.status === 'complete'){
        if(this.cbs[msg.id]){
          this.cbs[msg.id]('complete', msg);
          delete this.cbs[msg.id];
        }
        this.msg_stack.shift();
        if(this.msg_stack.length === 0){
          this.emitEvent('programComplete');
        }
        this.robot_state = 'idle';
        this.process_msg_queue();
      }
    }else{
      if(this.cbs[msg.id]){
        this.cbs[msg.id]('complete', msg);
        delete this.cbs[msg.id];
      }
    }
    if(msg.status && msg.status === 'error' && msg.msg === 'Too many connections'){
      this.error = true;
      this.emitEvent('error');
    }
  },
  
  robot_state: 'idle',
  msg_stack: []
}
;
MirobotSave = function(el, conf){
  this.el = el;
  this.persister = new Persister(conf);
  this.init();
}

MirobotSave.prototype.createMenuItem = function(text, cb){
  var li = document.createElement('li');
  li.innerHTML = text;
  li.addEventListener('click', cb);
  return li
}

MirobotSave.prototype.createFileMenu = function(menu){
  var self = this;
  var progs_ul = menu.querySelector('ul#progs')
  if(!progs_ul){
    var progs_ul = document.createElement('ul');
    progs_ul.id = 'progs';
    progs_ul.className = 'subMenu';
    menu.appendChild(progs_ul);
  }else{
    progs_ul.innerHTML = '';
  }
  
  this.persister.fileList().map(function(f){
    progs_ul.appendChild(self.createMenuItem(f, function(){ self.openProgram(f);}));
  });
}

MirobotSave.prototype.setSaveFilename = function(name){
  var title = this.el.querySelector('#menu .title');
  if(name){
    title.innerHTML = '['+name+']';
  }else{
    title.innerHTML = '';
  }
}

MirobotSave.prototype.handleUpdate = function(){
  this.setSaveFilename(this.persister.currentProgram);
  this.createFileMenu(document.getElementById('save'));  
}

MirobotSave.prototype.init = function(){
  var self = this;
  this.persister.subscribe(function(){self.handleUpdate();});
  var wrap = document.createElement('div');
  wrap.className = 'wrapper';
  this.el.appendChild(wrap);
  var menu = document.createElement('ul');
  menu.id="saveMenu";
  menu.className="subMenu";
  menu.appendChild(this.createMenuItem(l(':save') + ' <span class="title"></span>', function(){ self.saveHandler();}));
  menu.appendChild(this.createMenuItem(l(':save-as') + '...', function(){ self.saveAsHandler();}));
  menu.appendChild(this.createMenuItem(l(':new-prog'), function(){ self.newHandler();}));
  menu.appendChild(this.createMenuItem(l(':delete-prog'), function(){ self.deleteHandler();}));
  menu.appendChild(this.createMenuItem(l(':download'), function(){ self.downloadHandler();}));
  var uploader = document.createElement('input');
  uploader.type = 'file';
  uploader.id = "uploader";
  wrap.appendChild(uploader);
  uploader.addEventListener('change', function(e){ self.uploadFileHandler(e) }, false);
  menu.appendChild(this.createMenuItem(l(':upload'), function(){ self.uploadHandler();}));
  
  var progs_li = document.createElement('li');
  progs_li.innerHTML = l(':open') + ':';
  progs_li.className = 'inactive';
  menu.appendChild(progs_li);
  wrap.appendChild(menu);
  if(this.persister.currentProgram){ this.setSaveFilename(this.persister.currentProgram);}
  
  this.createFileMenu(wrap);
  new MainMenu(this.el);
  this.el.classList.remove('hidden');

  window.addEventListener("keydown", function(e){ self.handleKeyboard(e);}, false);
}

MirobotSave.prototype.handleKeyboard = function(e){
  if(e.keyCode === 83 && e.metaKey){
    this.saveHandler();
    e.preventDefault();
    return false;
  }
}

MirobotSave.prototype.saveHandler = function(){
  if(this.persister.currentProgram){
    this.persister.save();
  }else{
    this.saveAsHandler();
  }
}

MirobotSave.prototype.saveAsHandler = function(){
  var filename = window.prompt(l(':choose-name'));
  if(filename && filename !== ''){
    if(this.persister.exists(filename)){
      alert(l(':exists'));
    }else{
      this.persister.saveAs(filename);
    }
  }
}

MirobotSave.prototype.uploadHandler = function(){
  if(this.checkSaved()){
    document.getElementById('uploader').click();
  }
}

MirobotSave.prototype.uploadFileHandler = function(e){
  var self = this;
  e.stopPropagation();
  e.preventDefault();
  if(typeof e.dataTransfer !== 'undefined'){
    var files = e.dataTransfer.files;
  }else if(typeof e.target !== 'undefined'){
    var files = e.target.files;
  }
  if(files.length > 1) return alert(l(':single-file'));
  
  // Read the file
  var r = new FileReader(files[0]);
  r.onload = function(e) { self.loadFromFile(e.target.result) }
  r.readAsText(files[0]);
  
  return false;
}

MirobotSave.prototype.loadFromFile = function(content){
  this.persister.new();
  this.persister.loadHandler(content);
}

MirobotSave.prototype.checkSaved = function(){
  if(this.persister.unsaved()){
    return window.confirm(l(':unsaved'))
  }
  return true;
}

MirobotSave.prototype.newHandler = function(){
  if(this.checkSaved()){
    this.persister.new();
  }
}

MirobotSave.prototype.downloadHandler = function(){
  this.persister.downloadCurrent();
}

MirobotSave.prototype.deleteHandler = function(){
  var filename = this.persister.currentProgram;
  if(filename && filename !== ''){
    if(confirm(l(':sure') + " '" + filename + "'? " + l(':permanent') + '.')){
      this.persister.delete(filename);
    }
  }
}

MirobotSave.prototype.openProgram = function(filename){
  if(this.checkSaved()){
    if(filename && filename !== '') this.persister.load(filename);
  }
}
;
MearmConn = function(mirobot, options){
  var self = this;

  this.extractConfig = function(){
    var hashConfig = {};
    if(window.location.hash !== ''){
      window.location.hash.replace('#', '').split('&').map(function(el){
        var split = el.split('=');
        hashConfig[split[0]] = split[1];
      });
    }
    return hashConfig;
  }

  this.connect = function(address){
    if(self.address !== address){
      if(this.mirobot.connected){
        this.mirobot.disconnect();
      }
      console.log('connecting to ' + address)
      self.address = address;
      if(typeof mirobot.devices[address] === 'undefined'){
        mirobot.devices[address] = {address: address, name: "Mirobot", last_seen: -1};
      }
      self.has_connected = false;
      self.connState = 'connecting';
      self.mirobot.connect('ws://' + address + ':8899/websocket');
      self.updateMenu();
    }
  }
  
  this.autoConnect = function(){
    var conf = this.extractConfig();
    if(typeof conf['m'] !== 'undefined'){
      // Check if there's already an address in the URL
      return this.connect(conf['m']);
    }
    mirobot.fetchDevices(function(devices){
      if(Object.keys(devices).length == 1){
        self.connect(Object.keys(devices)[0]);
      }
    });
  }
  
  this.updateMenu = function(){
    this.menu.setDevices(mirobot.devices, this.address);
    this.menu.setConnState(this.connState);
  }

  this.connHandler = function(e){
    if(e.state === 'connected'){
      this.connState = 'connected';
      this.has_connected = true;
      window.location = '#m=' + this.address;
      updateLinks();
    }else if(e.state === 'disconnected'){
      if(!this.has_connected){
        this.connState = 'cant_connect';
      }else{
        this.connState = 'disconnected';
      }
    }
    this.updateMenu();
  }

  this.init = function(){ 
    this.mirobot = mirobot;
    this.mirobot.addEventListener('connectedStateChange', function(r){ self.connHandler(r) });
    this.extractConfig();
    this.menu = new MirobotConnMenu('conn')
    this.connState = 'not_set';
    this.menu.onConnect(function(address){
      self.connect(address);
    });
    this.autoConnect();
  }
  
  this.init();
}

// Handles the dom implementation of the connection menu
MirobotConnMenu = function(el){
  var self = this;
  this.connectCb = undefined;
  this.el = document.getElementById(el);

  this.init = function(){
    this.devices = {};
    this.el.innerHTML += '<div class="wrapper"><ul class="subMenu"></ul></div>';
    new MainMenu(this.el)
    this.updateConnMenu();
  }
  
  this.onConnect = function(cb){
    this.connectCb = cb;
  }

  this.updateConnMenu = function(){
    var menu = this.el.querySelector('.subMenu');
    menu.innerHTML = '';
    
    var clickHandler = function(address){
      return function(e){
        if(self.connectCb) self.connectCb(address);
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    }   
    
    for(var device in this.devices){
      if(this.devices.hasOwnProperty(device)){
        var devEl = document.createElement('li');
        devEl.innerHTML = this.devices[device].name + ' <span class="address">(' + device + ')</span>';
        devEl.addEventListener('click', clickHandler(this.devices[device].address));
        if(this.selected_device === this.devices[device].address){
          devEl.classList.add('selected');
        }
        menu.appendChild(devEl);
      }
    }
    
    var submit = function(e){
      var ip = document.querySelector('#conn input').value;
      if(ip) return clickHandler(ip)(e);
    }

    var devEl = document.createElement('li');
    devEl.innerHTML = '<p>' + l(':address') + ':</p><input type="text" placeholder="192.168.1.100" value=""/><button>' + l(':connect') + '</button>';
    devEl.querySelector('input').addEventListener('keypress', function(e){
       if(e && e.keyCode == 13) return submit(e);
    })
    devEl.querySelector('button').addEventListener('click', function(e){
      return submit(e)
    });
    menu.appendChild(devEl);
  }

  this.setDevices = function(devices, selected){
    this.devices = devices;
    this.selected_device = selected;
    this.updateConnMenu();
  }

  this.setConnState = function(connState){
    this.connState = connState;
    switch(connState){
      case 'not_set':
        this.el.classList.remove('connected');
        this.el.classList.remove('error');
        break;
      case 'connected':
        this.el.classList.remove('error');
        this.el.classList.add('connected');
        break;
      case 'connecting':
        this.el.classList.remove('connected');
        this.el.classList.remove('error');
        break;
      case 'cant_connect':
        this.el.classList.remove('connected');
        this.el.classList.add('error');
        break;
      case 'disconnected':
        this.el.classList.remove('connected');
        this.el.classList.add('error');
        break;
    }
    this.updateConnMenu();
  }
  
  this.init();
}
;
MearmApp = function(options){
  options = options || {};
  window.l10n = (typeof options.l10n !== 'undefined' && options.l10n);
  this.languages =  options.languages;
  if(l10n) l10nMenu('l10n', this.languages);
  this.initFullScreenButton();
  this.mearm = new Mearm();
  new MearmConn(this.mearm);
}

MearmApp.prototype.supportsLocalStorage = function(){
  try {
    return 'localStorage' in window && window['localStorage'] !== null;
  } catch (e) {
    return false;
  }
}

MearmApp.prototype.initPersistence = function(conf){
  if(this.supportsLocalStorage()){
    this.saveMenu = new MirobotSave(document.querySelector('#save'), conf);
  }
}

MearmApp.prototype.initFullScreenButton = function(conf){
  if(typeof document.fullscreenEnabled === 'undefined') return document.querySelector('#fullscreen').classList.add('hidden');

  var setBodyClass = function(){
    var fn = document.fullscreenElement ? 'add' : 'remove'
    document.body.classList[fn]('fullscreen');
  }

  document.getElementById('fullscreen').addEventListener('click', function(){
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen();
    } else {
      document.exitFullscreen();
    }
  });
  document.addEventListener('fullscreenchange', setBodyClass, false);
  setBodyClass();
}

;
var Persister = function(conf){
  var self = this;
  this.namespace = window.location.pathname.replace(/\//g, '').replace('index.html', '');
  window.addEventListener('beforeunload', function(){return self.handleUnload();});
  if(conf.saveHandler && typeof conf.saveHandler === 'function' && conf.loadHandler && typeof conf.loadHandler === 'function'){
    this.saveHandler = conf.saveHandler;
    this.loadHandler = conf.loadHandler;
    this.clearHandler = conf.clearHandler;
  }
  this.fileType = conf.fileType || 'txt';
  this.init();
}

Persister.prototype = {
  listeners: [],
  init: function(){
    this.initLocalStorage();
    if(!this.localStorage) return;
    this.currentProgram = this.localStorage['/' + this.namespace + '/currentProgram']
    var unsaved = this.localStorage['/' + this.namespace + '/unsaved'];
    if(unsaved){
      this.loadHandler(unsaved);
    }else{
      if(this.currentProgram){
        var program = this.localStorage['/' + this.namespace + '/programs/' + this.currentProgram]
        if(program){
          this.loadHandler(program);
        }
      }
    }  
  },
  initLocalStorage: function(){
    try {
      localStorage.setItem('test', true);
      localStorage.removeItem('test');
      this.localStorage = window.localStorage;
    } catch (e) {
      // No local storage
      if('chrome' in window && 'storage' in window.chrome){
        // We are running as a chrome app
        this.localStorage = window.chrome.storage;
      }else{
        this.localStorage = false;
      }
    }
  },
  load: function(name){
    var program = this.localStorage['/' + this.namespace + '/programs/' + name]
    if(program){
      this.currentProgram = name;
      this.localStorage['/' + this.namespace + '/currentProgram'] = name;
      this.clearHandler();
      this.loadHandler(program);
      this.notify();
    }
  },
  handleUnload: function(){
    // compare the programs to check for differences
    if(!this.unsaved()){
      // Program has not changed so no need to store unsaved
      this.localStorage.removeItem('/' + this.namespace + '/unsaved');
    }else{
      // Program has changed, so save unsaved changes
      this.localStorage['/' + this.namespace + '/unsaved'] = this.saveHandler(this.currentProgram || 'untitled');
    }
  },
  unsaved: function(){
    return !this.currentProgram || this.localStorage['/' + this.namespace + '/programs/' + this.currentProgram] !== this.saveHandler(this.currentProgram);
  },
  exists: function(name){
    return typeof this.localStorage['/' + this.namespace + '/programs/' + name] !== 'undefined'
  },
  saveAs: function(name){
    this.localStorage['/' + this.namespace + '/currentProgram'] = name;
    this.currentProgram = name;
    this.saveProgram();
    this.notify();
  },
  save: function(){
    this.saveProgram();
  },
  downloadCurrent: function(){
    if(this.currentProgram){
      var blob = new Blob([this.saveHandler(this.currentProgram)], {type: "text/plain;charset=utf-8"});
      var fileName = this.namespace + '-' + this.currentProgram + '.' + this.fileType;
      saveAs(blob, fileName);
    }
  },
  delete: function(program){
    if(this.localStorage['/' + this.namespace + '/currentProgram'] === program){
      this.localStorage.removeItem('/' + this.namespace + '/currentProgram');
    }
    this.localStorage.removeItem('/' + this.namespace + '/programs/' + program);
    this.currentProgram = undefined;
    this.clearHandler();
    this.notify();
  },
  new: function(){
    this.currentProgram = undefined;
    this.clearHandler();
    this.notify();
  },
  saveProgram: function(){
    this.localStorage['/' + this.namespace + '/programs/' + this.currentProgram] = this.saveHandler(this.currentProgram);
  },
  notify: function(){
    for(var i in this.listeners){
      if(this.listeners.hasOwnProperty(i)){
        this.listeners[i]();
      }
    }
  },
  subscribe: function(cb){
    this.listeners.push(cb);
  },
  fileList: function(){
    var files = [];
    var prefix = '/' + this.namespace + '/programs/';
    for(var i=0; i< this.localStorage.length; i++){
      var name = this.localStorage.key(i);
      if(name.startsWith(prefix)){
        files.push(name.replace(prefix, ''));
      }
    }
    return files;
  }
}
;
var MainMenu = function(el){
  var timer;
  
  var toggleMenu = function(e){
    el.classList.toggle('show');
    e.preventDefault();
    return false;
  }

  var hideMenu = function(e){
    el.classList.remove('show');
    if(e) e.preventDefault();
    return false;
  }  

  var handleKeyboard = function(e){
    if(e.keyCode === 27){
      hideMenu();
      e.preventDefault();
      return false;
    }
  }
  
  el.addEventListener('mouseup', toggleMenu);
  el.querySelector('.wrapper').addEventListener('mouseup', function(e){
    e.stopPropagation();
  });
  el.addEventListener('mouseleave', function(){
    timer = window.setTimeout(hideMenu, 500);
  });
  el.addEventListener('mouseenter', function(){
    if(timer){
      window.clearTimeout(timer);
      timer = undefined;
    }
  });
  window.addEventListener("keydown", function(e){ handleKeyboard(e);}, false);
}

var isChromeApp = function(){
  return window.chrome && chrome.runtime && chrome.runtime.id;
}

/*
  Update the links so that they preserve the language and mirobot config
*/
var updateLinks = function(){
  [].forEach.call(document.links, function(l) {
    if(l.getAttribute('data-relink') && l.getAttribute('data-relink') === 'false') return;
    if(l.href.startsWith('mailto')) return;
    l.href = l.href.split('?')[0];
    l.href = l.href.split('#')[0];
    // Make the URL have index.html if running as a chrome app
    if(isChromeApp()){
      if(l.href.slice(-1) === '/'){
        l.href += 'index.html';
      }
    }
    // Add the query for the language
    l.href += document.location.search;
    // Add the hash for configuring Mirobot    
    l.href += document.location.hash;
  });
}

document.addEventListener('DOMContentLoaded', updateLinks);
/*! @source http://purl.eligrey.com/github/l10n.js/blob/master/l10n.js*/

(function(){"use strict";var q="undefined",a="string",m=self.navigator,o=String,l=Object.prototype.hasOwnProperty,z={},B={},t=!1,k=!0,s=/^\s*application\/(?:vnd\.oftn\.|x-)?l10n\+json\s*(?:$|;)/i,p,A="locale",j="defaultLocale",r="toLocaleString",e="toLowerCase",x=Array.prototype.indexOf||function(E){var C=this.length,D=0;for(;D<C;D++){if(D in this&&this[D]===E){return D}}return -1},b=function(C){var i=new p();i.open("GET",C,t);i.send(null);if(i.status!==200){setTimeout(function(){var D=new Error("Unable to load localization data: "+C);D.name="Localization Error";throw D},0);return{}}else{return JSON.parse(i.responseText)}},n=o[r]=function(D){if(arguments.length>0&&typeof D!=="number"){if(typeof D===a){n(b(D))}else{if(D===t){B={}}else{var i,E,C;for(i in D){if(l.call(D,i)){E=D[i];i=i[e]();if(!(i in B)||E===t){B[i]={}}if(E===t){continue}if(typeof E===a){if(o[A][e]().indexOf(i)===0){E=b(E)}else{if(!(i in z)){z[i]=[]}z[i].push(E);continue}}for(C in E){if(l.call(E,C)){B[i][C]=E[C]}}}}}}}return Function.prototype[r].apply(o,arguments)},h=function(E){var D=z[E],F=0,C=D.length,G;for(;F<C;F++){G={};G[E]=b(D[F]);n(G)}delete z[E]},u,w=o.prototype[r]=function(){var E=u,G=o[E?j:A],H=G[e]().split("-"),F=H.length,D=this.valueOf(),C;u=t;do{C=H.slice(0,F).join("-");if(C in z){h(C)}if(C in B&&D in B[C]){return B[C][D]}}while(F-->1);if(!E&&o[j]){u=k;return w.call(D)}return D};if(typeof XMLHttpRequest===q&&typeof ActiveXObject!==q){var f=ActiveXObject;p=function(){try{return new f("Msxml2.XMLHTTP.6.0")}catch(C){}try{return new f("Msxml2.XMLHTTP.3.0")}catch(i){}try{return new f("Msxml2.XMLHTTP")}catch(D){}throw new Error("XMLHttpRequest not supported by this browser.")}}else{p=XMLHttpRequest}o[j]=o[j]||"";o[A]=m&&(m.language||m.userLanguage)||"";if(typeof document!==q){var y=document.getElementsByTagName("link"),v=y.length,g;while(v--){var d=y[v],c=(d.getAttribute("rel")||"")[e]().split(/\s+/);if(s.test(d.type)){if(x.call(c,"localizations")!==-1){n(d.getAttribute("href"))}else{if(x.call(c,"localization")!==-1){g={};g[(d.getAttribute("hreflang")||"")[e]()]=d.getAttribute("href");n(g)}}}}}}());

function getQueryParams(qs) {
    qs = qs.split('+').join(' ');
    var params = {},
        tokens,
        re = /[?&]?([^=]+)=([^&]*)/g;
    while (tokens = re.exec(qs)) {
        params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);
    }
    return params;
}

var updateL10nStrings = function(){
  [].forEach.call(document.querySelectorAll("[data-l10n]"), function(s) {
    var trans = l(s.getAttribute('data-l10n'));
    if (trans !== s.getAttribute('data-l10n') && s.children.length === 0){
      s.innerHTML = trans;
    }
  });
}

var updateL10nNames = function(){
  [].forEach.call(document.querySelectorAll("[data-l10n]"), function(s) {
    var trans = l(s.getAttribute('data-l10n'));
    if (trans !== s.getAttribute('data-l10n')){
      s.setAttribute('name', trans);
    }
  });
}

var initL10n = function(){
  String.defaultLocale = 'en';
  String.locale = 'en';
  String.toLocaleString(trans);
  var params = getQueryParams(document.location.search);
  if (params.lang) {
    String.locale = params.lang;
  }
}
initL10n();

window.l = function(string){
  var str = string.toLocaleString();
  if(str === string){
    str = string.toLocaleString(['en']);
    console.log("Error translating: " + string);
  }
  return str
};

function addMirobotSnapTrans(lang){
  for(var item in trans[lang]){
    if(trans[lang].hasOwnProperty(item)){
      SnapTranslator.dict[lang][item] = trans[lang][item];
    }
  }
}


function l10nMenu(el_id, languages){
  var el = document.getElementById(el_id)
  if(!el) return;
  if(window.l10n) el.classList.remove('hidden');
  el.innerHTML += '<div class="wrapper"><ul class="subMenu"></ul></div>';
  var menu = el.querySelector('ul.subMenu');

  var langCb = function(lang){
    return function(){
      var loc = document.location;
      var newLoc = loc.pathname + '?lang=' + lang + loc.hash;
      window.location = newLoc;
    }
  }

  languages.map(function(locale){
    if(trans.hasOwnProperty(locale)){
      var li = document.createElement('li');
      li.addEventListener('click', langCb(locale));
      li.innerHTML = '<span class="flag-icon flag-icon-' + trans[locale].flag + '"></span> ' + trans[locale].langName;
      menu.appendChild(li);
    }
  });
  var li = document.createElement('li');
  li.innerHTML = '<a href="mailto:info@mirobot.io?subject=Mirobot%20Apps%20Translation&body=Hi,%20I\'d%20like%20to%20help%20by%20translating%20Mirobot%20Apps%20into...">Add your language...</a>';
  menu.appendChild(li);
  new MainMenu(el);
}

document.addEventListener('DOMContentLoaded', updateL10nStrings);










